;;; Copyright (c) 2003-2008 uim Project http://code.google.com/p/uim/
;;;
;;; All rights reserved.
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.
;;; 3. Neither the name of authors nor the names of its contributors
;;;    may be used to endorse or promote products derived from this software
;;;    without specific prior written permission.
;;;
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;

(define-module test.util.test-srfi
  (use test.unit.test-case)
  (use test.uim-test-utils-new))
(select-module test.util.test-srfi)

(define (setup)
  (uim-test-setup)
  (uim '(define lst '(1 "2" three (4) 5 six "7" (8 8) -9)))
  (uim '(define lst2 '(1 "2" three (4) 5 six "7" (8 8) -9 #f 11 #f "13")))
  (uim '(define lst3 '("1" "2" "three")))
  (uim '(define lst4 '(1 2 3)))
  (uim '(define lst5 '(1 #f 3 "four")))
  (uim '(define lst6 '(#f #f)))
  (uim '(define lst7 '(#f #f #f)))
  (uim '(define alist-int '((23 "23" twentythree)
                            (1 "1" one)
                            (5 "5" five)
                            (3 "3" three))))
  (uim '(define alist-str '(("23" 23 twentythree)
                            ("1" 1 one)
                            ("5" 5 five)
                            ("3" 3 three))))
  (uim '(define alist-lst '((("23") 23 twentythree)
                            (("1") 1 one)
                            (("5") 5 five)
                            (("3") 3 three))))
  (uim '(define alist-sym '((twentythree "23" 23)
                            (one "1" 1)
                            (five "5" 5)
                            (three "3" 3)))))

(define (teardown)
  (uim-test-teardown))

(define (test-list-tabulate)
  (assert-equal ()
                (uim '(list-tabulate 0 (lambda (x) x))))
  (assert-equal '(0)
                (uim '(list-tabulate 1 (lambda (x) x))))
  (assert-equal '(0 1 2 3 4)
                (uim '(list-tabulate 5 (lambda (x) x))))
  (assert-equal '(0 1 4 9 16)
                (uim '(list-tabulate 5 (lambda (x) (* x x)))))
  (assert-error (lambda ()
                  (uim '(list-tabulate -1 (lambda (x) x)))))
  #f)

(define (test-make-list)
  (assert-equal '(fill fill fill)
                (uim '(make-list 3 'fill)))
  (assert-equal '(0 0 0)
                (uim '(make-list 3 0)))
  (assert-equal '("string" "string" "string")
                (uim '(make-list 3 "string")))
  (assert-equal '((fill "fill") (fill "fill") (fill "fill"))
                (uim '(make-list 3 '(fill "fill"))))
  (assert-equal '(() () ())
                (uim '(make-list 3 ())))
  (assert-equal '(())
                (uim '(make-list 1 ())))
  (assert-equal '()
                (uim '(make-list 0 ())))
  (assert-equal '()
                (uim '(make-list 0 'fill)))
  (assert-error (lambda ()
                  (uim '(make-list -1 'fill))))
  #f)

(define (test-iota)
  (assert-equal ()
                (uim '(iota 0)))
  (assert-equal '(0)
                (uim '(iota 1)))
  (assert-equal '(0 1 2 3 4)
                (uim '(iota 5)))
  (assert-error (lambda ()
                  (uim '(iota -1))))

  (assert-equal ()
                (uim '(iota 0 0)))
  (assert-equal '(0)
                (uim '(iota 1 0)))
  (assert-equal '(0 1 2 3 4)
                (uim '(iota 5 0)))
  (assert-error (lambda ()
                  (uim '(iota -1 0))))

  (assert-equal '()
                (uim '(iota 0 1)))
  (assert-equal '(1)
                (uim '(iota 1 1)))
  (assert-equal '(1 2 3 4 5)
                (uim '(iota 5 1)))
  (assert-error (lambda ()
                  (uim '(iota -1 1))))

  (assert-equal '(3)
                (uim '(iota 1 3)))
  (assert-equal '(3 4 5 6 7)
                (uim '(iota 5 3)))
  (assert-error (lambda ()
                  (uim '(iota -1 3))))

  (assert-equal '(5 6 7 8 9)
                (uim '(iota 5 5)))
  #f)

(define (test-zip)
  (assert-equal '((1) (2) (3) (4) (5))
                (uim '(zip '(1 2 3 4 5))))
  (assert-equal '((1 "1" one) (2 "2" two) (3 "3" three) (4 "4" four) (5 "5" five))
                (uim '(zip '(1 2 3 4 5)
                           '("1" "2" "3" "4" "5")
                           '(one two three four five))))
  (assert-equal '((1 "1" one) (2 "2" two) (3 "3" three))
                (uim '(zip '(1 2 3 4 5)
                           '("1" "2" "3" "4" "5")
                           '(one two three))))
  (assert-equal ()
                (uim '(zip '()
                           '("1" "2" "3" "4" "5")
                           '(one two three))))
  (assert-equal ()
                (uim '(zip ())))
  #f)

(define (test-append-map)
  (assert-equal '()
                (uim '(append-map car ())))
  (assert-equal '(c)
                (uim '(append-map car '(((c) (C))))))
  (assert-equal '(c a)
                (uim '(append-map car '(((c) (C)) ((a) (A))))))
  (assert-equal '(c a r)
                (uim '(append-map car '(((c) (C)) ((a) (A)) ((r) (R))))))
  #f)

(define (test-append-reverse)
  (assert-equal '("5" "4" "3" "2" "1" six seven eight)
                (uim '(append-reverse '("1" "2" "3" "4" "5")
                                      '(six seven eight))))
  (assert-equal '(six seven eight)
                (uim '(append-reverse ()
                                      '(six seven eight))))
  (assert-equal '("5" "4" "3" "2" "1")
                (uim '(append-reverse '("1" "2" "3" "4" "5")
                                      ())))
  (assert-equal ()
                (uim '(append-reverse ()
                                      ())))
  #f)

(define (test-find)
  (assert-equal "2"
                (uim '(find string? lst)))
  (assert-equal 'three
                (uim '(find symbol? lst)))
  (assert-equal #f
                (uim '(find string? ())))
  (assert-equal -9
                (uim '(find (lambda (x)
                              (and (integer? x)
                                   (< x 0)))
                            lst)))
  #f)

(define (test-any)
  (assert-true  (uim-bool '(any string? lst)))
  (assert-true  (uim-bool '(any string? lst2)))
  (assert-true  (uim-bool '(any string? lst3)))
  (assert-false (uim-bool '(any string? lst4)))
  (assert-true  (uim-bool '(any proc-or lst2)))
  (assert-false (uim-bool '(any proc-or lst6)))
  (assert-true  (uim-bool '(any proc-or lst2 lst6)))
  (assert-true  (uim-bool '(any proc-or lst6 lst2)))
  (assert-false (uim-bool '(any proc-or lst6 lst7)))
  (assert-true  (uim-bool '(any proc-or lst5 lst6 lst7)))
  (assert-false (uim-bool '(any string? ())))
  #f)

(define (test-every)
  (assert-false (uim-bool '(every string? lst)))
  (assert-false (uim-bool '(every string? lst2)))
  (assert-true  (uim-bool '(every string? lst3)))
  (assert-false (uim-bool '(every string? lst4)))
  (assert-true  (uim-bool '(every proc-or lst)))
  (assert-false (uim-bool '(every proc-or lst2)))
  (assert-false (uim-bool '(every proc-or lst6)))
  (assert-true  (uim-bool '(every proc-or lst2 lst6)))
  (assert-true  (uim-bool '(every proc-or lst6 lst2)))
  (assert-false (uim-bool '(every proc-or lst6 lst7)))
  (assert-true  (uim-bool '(every proc-or lst4 lst6 lst7)))
  (assert-false (uim-bool '(every proc-or lst5 lst6 lst7)))
  (assert-true  (uim-bool '(every string? ())))
  #f)

(define (test-fold)
  (assert-equal ()
                (uim '(fold cons () ())))
  (assert-equal '(5 4 3 2 1)
                (uim '(fold cons () '(1 2 3 4 5))))
  (assert-equal '(1 2 3 4 5 6 7 8 9)
                (uim '(fold cons '(6 7 8 9) '(5 4 3 2 1))))
  (assert-equal '(9 8 7 6 5 4 3 2 1)
                (uim '(fold cons '(5 4 3 2 1) '(6 7 8 9))))
  (assert-equal 24
                (uim '(fold + 0 '(1 2 3 4 5) '(1 2 1 2 3))))
  (assert-equal 9
                (uim '(fold + 0 '(1 2 3 4 5) '(1 2 1 2 3) '(7))))
  (assert-equal 0
                (uim '(fold + 0 '(1 2 3 4 5) () '(1 2 1 2 3))))
  (assert-equal 120
                (uim '(fold * 1 '(1 2 3 4 5))))
  (assert-equal 14400
                (uim '(fold * 1 '(1 2 3 4 5) '(1 2 3 4 5))))
  #f)

(define (test-unfold)
  ;; immediate term
  (assert-equal '()
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5)))
  (assert-equal '(5)
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5
                              (lambda (rest)
                                (list rest)))))
  (assert-equal '(-1)
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5
                              (lambda (rest)
                                '(-1)))))
  ;; 5 times
  (assert-equal '(5 4 3 2 1)
                (uim '(unfold (lambda (x)
                                (= x 0))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5)))
  (assert-equal '(5 4 3 2 1 0)
                (uim '(unfold (lambda (x)
                                (= x 0))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5
                              (lambda (x)
                                (list x)))))
  (assert-equal '(5 4 3 2 1 -1)
                (uim '(unfold (lambda (x)
                                (= x 0))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (- rest 1))
                              5
                              (lambda (x)
                                '(-1)))))
  ;; 5 times, reversed
  (assert-equal '(0 1 2 3 4)
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (+ rest 1))
                              0)))
  (assert-equal '(0 1 2 3 4 5)
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (+ rest 1))
                              0
                              (lambda (x)
                                (list x)))))
  (assert-equal '(0 1 2 3 4 -1)
                (uim '(unfold (lambda (x)
                                (= x 5))
                              (lambda (rest)
                                rest)
                              (lambda (rest)
                                (+ rest 1))
                              0
                              (lambda (x)
                                '(-1)))))
  ;; restruct same list
  (assert-equal '(0 1 2 3 4 5)
                (uim '(unfold null?
                              car
                              cdr
                              '(0 1 2 3 4 5))))
  (assert-equal '(0 1 2 3 4 5)
                (uim '(unfold null?
                              car
                              cdr
                              '(0 1 2 3 4 5)
                              (lambda (x)
                                x))))
  (assert-equal '(0 1 2 3 4 5 . -1)
                (uim '(unfold null?
                              car
                              cdr
                              '(0 1 2 3 4 5)
                              (lambda (x)
                                -1))))
  #f)

(define (test-filter)
  (assert-equal ()
                (uim '(filter not ())))
  (assert-equal '(5 6 4)
                (uim '(filter (lambda (x)
                                (< 3 x))
                              '(3 5 2 6 4 1))))
  (assert-equal '("2" "7")
                (uim '(filter string?
                              '(one "2" 3 #f (5) six "7" 8 (9) 10))))
  (assert-equal '(3 8 10)
                (uim '(filter integer?
                              '(one "2" 3 #f (5) six "7" 8 (9) 10))))
  #f)

(define (test-filter-map)
  ;; single list
  (assert-equal ()
                (uim '(filter-map not ())))
  (assert-equal '(5 6 4)
                (uim '(filter-map (lambda (x)
                                    (and (< 3 x)
                                         x))
                                  '(3 5 2 6 4 1))))
  (assert-equal '(10 12 8)
                (uim '(filter-map (lambda (x)
                                    (and (< 3 x)
                                         (* 2 x)))
                                  '(3 5 2 6 4 1))))
  (assert-equal (uim '(list (string? "") (string? "")))
                (uim '(filter-map string?
                                  '(one "2" 3 #f (5) six "7" 8 (9) 10))))
  (assert-equal (uim '(list (integer? 0) (integer? 0) (integer? 0)))
                (uim '(filter-map integer?
                                  '(one "2" 3 #f (5) six "7" 8 (9) 10))))
  ;; multiple lists
  (assert-equal '()
                (uim '(filter-map +
                                  ()
                                  ())))
  (assert-equal '(8 11 10 8)
                (uim '(filter-map (lambda (x y)
                                    (let ((sum (+ x y)))
                                      (and (< 6 sum)
                                           sum)))
                                  '(3 5 2 6 4 1)
                                  '(1 3 9 4 2 7))))
  (assert-equal ()
                (uim '(filter-map (lambda (x y)
                                    (let ((sum (+ x y)))
                                      (and (< 6 sum)
                                           sum)))
                                  ()
                                  '(1 3 9 4 2 7))))
  (assert-equal '(8 11 10)
                (uim '(filter-map (lambda (x y)
                                    (let ((sum (+ x y)))
                                      (and (< 6 sum)
                                           sum)))
                                  '(3 5 2 6 4 1)
                                  '(1 3 9 4))))
  (assert-equal '("aAa1" "bBb2" "cCc3" "dDd4")
                (uim '(filter-map string-append
                                  '("a" "b" "c" "d")
                                  '("A" "B" "C" "D")
                                  '("a" "b" "c" "d")
                                  '("1" "2" "3" "4" "5"))))
  #f)

(define (test-remove)
  (assert-equal '(1 three (4) 5 six (8 8) -9)
                (uim '(remove string? lst)))
  (assert-equal '("2" three (4) six "7" (8 8))
                (uim '(remove integer? lst)))
  (assert-equal '("2" three (4) six "7" (8 8) -9)
                (uim '(remove (lambda (x)
                                (and (integer? x)
                                     (> x 0)))
                              lst)))
  (assert-equal ()
                (uim '(remove string? ())))
  (assert-equal ()
                (uim '(remove string? '("1" "2"))))
  #f)

(define (test-alist-delete)
  (assert-equal '((23 "23" twentythree)
                  (1 "1" one)
                  (5 "5" five))
                (uim '(alist-delete 3 alist-int)))
  (assert-equal '((23 "23" twentythree)
                  (1 "1" one)
                  (5 "5" five)
                  (3 "3" three))
                (uim '(alist-delete 0 alist-int)))
  (assert-equal '((1 "1" one)
                  (5 "5" five)
                  (3 "3" three))
                (uim '(alist-delete 23 alist-int)))
  (assert-equal '((23 "23" twentythree)
                  (1 "1" one)
                  (5 "5" five)
                  (3 "3" three))
                (uim '(alist-delete "3" alist-int)))
  (assert-equal '(("23" 23 twentythree)
                  ("1" 1 one)
                  ("3" 3 three))
                (uim '(alist-delete "5" alist-str)))
  (assert-error (lambda ()
                  '(("23" 23 twentythree)
                    ("1" 1 one)
                    ("5" 5 five)
                    ("3" 3 three))
                  (uim '(alist-delete "5" alist-str =))))
  (assert-equal '(("23" 23 twentythree)
                  ("1" 1 one)
                  ("5" 5 five)
                  ("3" 3 three))
                (uim '(alist-delete "5" alist-str eqv?)))
  (assert-equal '(("23" 23 twentythree)
                  ("1" 1 one)
                  ("3" 3 three))
                (uim '(alist-delete "5" alist-str string=?)))
  (assert-equal '((("1") 1 one)
                  (("5") 5 five)
                  (("3") 3 three))
                (uim '(alist-delete '("23") alist-lst)))
  (assert-equal '((("1") 1 one)
                  (("5") 5 five)
                  (("3") 3 three))
                (uim '(alist-delete '("23") alist-lst equal?)))
  (assert-equal '((twentythree "23" 23)
                  (five "5" 5)
                  (three "3" 3))
                (uim '(alist-delete 'one alist-sym)))
  (assert-equal '((twentythree "23" 23)
                  (one "1" 1)
                  (five "5" 5))
                (uim '(alist-delete 'three alist-sym eq?)))
  #f)

(provide "test/util/test-srfi")
